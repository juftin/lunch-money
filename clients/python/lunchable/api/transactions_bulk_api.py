# coding: utf-8

"""
    Lunch Money API - v2

    This is a version of the Lunch Money API described using the the OpenAPI 3.X specification.    The goal of this project is to validate an \"API Design First\" approach for the Lunch Money API, which should allow us to gather developer feedback prior to implementation in order to develop API endpoints more quickly.  This version of the API will differ from the existing v1 beta version. For more information on the changes please see the  [v2 API Changelog](https://lm-v2-api-mock-data-f24357049a1b.herokuapp.com/v2/changelog)  Some useful links: - [Current v1 Lunch Money API Documentation](https://lunchmoney.dev) - [v2 API Changelog](https://lm-v2-api-mock-data-f24357049a1b.herokuapp.com/v2/changelog) - [OpenAPI API YAML Specification](https://lm-v2-api-mock-data-f24357049a1b.herokuapp.com/v2/openapi/) - [Awesome Lunch Money Projects](https://lunchmoney.dev/#awesome-projects)

    The version of the OpenAPI document: 2.7.4
    Contact: devsupport@lunchmoney.app
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from datetime import date
from pydantic import Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Optional
from typing_extensions import Annotated
from lunchable.models.create_new_transactions201_response import CreateNewTransactions201Response
from lunchable.models.create_new_transactions_request import CreateNewTransactionsRequest
from lunchable.models.delete_transactions_request import DeleteTransactionsRequest
from lunchable.models.get_all_transactions200_response import GetAllTransactions200Response

from lunchable.api_client import ApiClient, RequestSerialized
from lunchable.api_response import ApiResponse
from lunchable.rest import RESTResponseType


class TransactionsBulkApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def create_new_transactions(
        self,
        create_new_transactions_request: CreateNewTransactionsRequest,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> CreateNewTransactions201Response:
        """Insert one or more transactions.

        Use this endpoint to add transactions to a budget.  The request body for this endpoint must include a list of transactions with at least one transaction and not more than 500 transactions to insert.

        :param create_new_transactions_request: (required)
        :type create_new_transactions_request: CreateNewTransactionsRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_new_transactions_serialize(
            create_new_transactions_request=create_new_transactions_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "CreateNewTransactions201Response",
            '400': "ErrorResponseObject",
            '401': "ErrorResponseObject",
            '429': "ErrorResponseObject",
            '500': "ErrorResponseObject",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def create_new_transactions_with_http_info(
        self,
        create_new_transactions_request: CreateNewTransactionsRequest,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[CreateNewTransactions201Response]:
        """Insert one or more transactions.

        Use this endpoint to add transactions to a budget.  The request body for this endpoint must include a list of transactions with at least one transaction and not more than 500 transactions to insert.

        :param create_new_transactions_request: (required)
        :type create_new_transactions_request: CreateNewTransactionsRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_new_transactions_serialize(
            create_new_transactions_request=create_new_transactions_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "CreateNewTransactions201Response",
            '400': "ErrorResponseObject",
            '401': "ErrorResponseObject",
            '429': "ErrorResponseObject",
            '500': "ErrorResponseObject",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def create_new_transactions_without_preload_content(
        self,
        create_new_transactions_request: CreateNewTransactionsRequest,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Insert one or more transactions.

        Use this endpoint to add transactions to a budget.  The request body for this endpoint must include a list of transactions with at least one transaction and not more than 500 transactions to insert.

        :param create_new_transactions_request: (required)
        :type create_new_transactions_request: CreateNewTransactionsRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_new_transactions_serialize(
            create_new_transactions_request=create_new_transactions_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "CreateNewTransactions201Response",
            '400': "ErrorResponseObject",
            '401': "ErrorResponseObject",
            '429': "ErrorResponseObject",
            '500': "ErrorResponseObject",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _create_new_transactions_serialize(
        self,
        create_new_transactions_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if create_new_transactions_request is not None:
            _body_params = create_new_transactions_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'cookieAuth', 
            'bearerSecurity'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/transactions',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def delete_transactions(
        self,
        delete_transactions_request: DeleteTransactionsRequest,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Bulk delete existing transactions

        Deletes the transaction with the IDs specified in the request body.<br> If any of the specified transactions are a split transaction or a split parent, or if any are a grouped transactions or part of a transaction group, the request will fail with a suggestion on how to unsplit or ungroup the transaction(s) prior to deletion.  This will also fail if any of the specified transaction IDs do not exist.<br> Otherwise, the specified transactions are deleted. This action is not reversible!

        :param delete_transactions_request: (required)
        :type delete_transactions_request: DeleteTransactionsRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_transactions_serialize(
            delete_transactions_request=delete_transactions_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
            '400': "ErrorResponseObject",
            '401': "ErrorResponseObject",
            '404': "ErrorResponseObject",
            '429': "ErrorResponseObject",
            '500': "ErrorResponseObject",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def delete_transactions_with_http_info(
        self,
        delete_transactions_request: DeleteTransactionsRequest,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Bulk delete existing transactions

        Deletes the transaction with the IDs specified in the request body.<br> If any of the specified transactions are a split transaction or a split parent, or if any are a grouped transactions or part of a transaction group, the request will fail with a suggestion on how to unsplit or ungroup the transaction(s) prior to deletion.  This will also fail if any of the specified transaction IDs do not exist.<br> Otherwise, the specified transactions are deleted. This action is not reversible!

        :param delete_transactions_request: (required)
        :type delete_transactions_request: DeleteTransactionsRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_transactions_serialize(
            delete_transactions_request=delete_transactions_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
            '400': "ErrorResponseObject",
            '401': "ErrorResponseObject",
            '404': "ErrorResponseObject",
            '429': "ErrorResponseObject",
            '500': "ErrorResponseObject",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def delete_transactions_without_preload_content(
        self,
        delete_transactions_request: DeleteTransactionsRequest,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Bulk delete existing transactions

        Deletes the transaction with the IDs specified in the request body.<br> If any of the specified transactions are a split transaction or a split parent, or if any are a grouped transactions or part of a transaction group, the request will fail with a suggestion on how to unsplit or ungroup the transaction(s) prior to deletion.  This will also fail if any of the specified transaction IDs do not exist.<br> Otherwise, the specified transactions are deleted. This action is not reversible!

        :param delete_transactions_request: (required)
        :type delete_transactions_request: DeleteTransactionsRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_transactions_serialize(
            delete_transactions_request=delete_transactions_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
            '400': "ErrorResponseObject",
            '401': "ErrorResponseObject",
            '404': "ErrorResponseObject",
            '429': "ErrorResponseObject",
            '500': "ErrorResponseObject",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _delete_transactions_serialize(
        self,
        delete_transactions_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if delete_transactions_request is not None:
            _body_params = delete_transactions_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'cookieAuth', 
            'bearerSecurity'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/transactions',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_all_transactions(
        self,
        start_date: Annotated[Optional[date], Field(description="Denotes the beginning of the time period to fetch transactions for. If omitted, the most recent transactions will be returned.  See `limit`. Required if end_date exists. <br>")] = None,
        end_date: Annotated[Optional[date], Field(description="Denotes the end of the time period you'd like to get transactions for. Required if start_date exists. ")] = None,
        manual_account_id: Annotated[Optional[StrictInt], Field(description="Filter transactions to those associated with specified manual account ID or set this to 0 to omit any transactions from manual accounts. Setting both this and `synched_account_id` to 0 will return transactions with no account. These are listed as \"Cash Transactions\" in the Lunch Money GUI.")] = None,
        plaid_account_id: Annotated[Optional[StrictInt], Field(description="Filter transactions to those associated with specified plaid account ID or set this to 0 to omit any transactions from plaid accounts. Setting both this and `manual_account_id` to 0 will return transactions with no account. These are listed as \"Cash Transactions\" in the Lunch Money GUI.")] = None,
        recurring_id: Annotated[Optional[StrictInt], Field(description="Filter transactions to those associated with specified Recurring  Item ID ")] = None,
        category_id: Annotated[Optional[StrictInt], Field(description="Filter transactions to those associated with the specified category ID. Will also match category groups.")] = None,
        is_group: Annotated[Optional[StrictBool], Field(description="Filter by group (returns only grouped transactions if set to true)")] = None,
        status: Annotated[Optional[StrictStr], Field(description="Filter transactions to those with the specified status:<br> - `reviewed`: Only user reviewed transactions or those that were automatically marked as reviewed due to reviewed recurring_item logic<br> - `unreviewed`: Only transactions that need to be reviewed<br> - `delete_pending`: Only transactions that require manual intervention because the plaid account deleted this transaction after it was updated by the user. <br> - `pending`: Only pending transactions from synced accounts.  Must also set `include_pending` to true.")] = None,
        tag_id: Annotated[Optional[StrictInt], Field(description="Filter transactions to those that have a tag with the specified Tag ID")] = None,
        include_pending: Annotated[Optional[StrictBool], Field(description="Pass in true if you’d like to include imported transactions with a pending status.")] = None,
        include_custom_metadata: Annotated[Optional[StrictBool], Field(description="Pass in true if you’d like the returned transactions objects to include any custom  metadata that was previously added via the API.")] = None,
        limit: Annotated[Optional[Annotated[int, Field(le=1000, strict=True, ge=1)]], Field(description="Sets the maximum number of transactions to return. If more match the filter criteria, the response will include a `has_more` attribute set to `true`.  See [pagination](foo)")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="Sets the offset for the records returned. This is typically set automatically in the header.  See [Pagination](/foo)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetAllTransactions200Response:
        """Get all transactions

        Retrieve a list of all transactions associated with a user's account. <br>If called with no parameters this endpoint will return up to 100 of the most recent transactions.

        :param start_date: Denotes the beginning of the time period to fetch transactions for. If omitted, the most recent transactions will be returned.  See `limit`. Required if end_date exists. <br>
        :type start_date: date
        :param end_date: Denotes the end of the time period you'd like to get transactions for. Required if start_date exists. 
        :type end_date: date
        :param manual_account_id: Filter transactions to those associated with specified manual account ID or set this to 0 to omit any transactions from manual accounts. Setting both this and `synched_account_id` to 0 will return transactions with no account. These are listed as \"Cash Transactions\" in the Lunch Money GUI.
        :type manual_account_id: int
        :param plaid_account_id: Filter transactions to those associated with specified plaid account ID or set this to 0 to omit any transactions from plaid accounts. Setting both this and `manual_account_id` to 0 will return transactions with no account. These are listed as \"Cash Transactions\" in the Lunch Money GUI.
        :type plaid_account_id: int
        :param recurring_id: Filter transactions to those associated with specified Recurring  Item ID 
        :type recurring_id: int
        :param category_id: Filter transactions to those associated with the specified category ID. Will also match category groups.
        :type category_id: int
        :param is_group: Filter by group (returns only grouped transactions if set to true)
        :type is_group: bool
        :param status: Filter transactions to those with the specified status:<br> - `reviewed`: Only user reviewed transactions or those that were automatically marked as reviewed due to reviewed recurring_item logic<br> - `unreviewed`: Only transactions that need to be reviewed<br> - `delete_pending`: Only transactions that require manual intervention because the plaid account deleted this transaction after it was updated by the user. <br> - `pending`: Only pending transactions from synced accounts.  Must also set `include_pending` to true.
        :type status: str
        :param tag_id: Filter transactions to those that have a tag with the specified Tag ID
        :type tag_id: int
        :param include_pending: Pass in true if you’d like to include imported transactions with a pending status.
        :type include_pending: bool
        :param include_custom_metadata: Pass in true if you’d like the returned transactions objects to include any custom  metadata that was previously added via the API.
        :type include_custom_metadata: bool
        :param limit: Sets the maximum number of transactions to return. If more match the filter criteria, the response will include a `has_more` attribute set to `true`.  See [pagination](foo)
        :type limit: int
        :param offset: Sets the offset for the records returned. This is typically set automatically in the header.  See [Pagination](/foo)
        :type offset: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_all_transactions_serialize(
            start_date=start_date,
            end_date=end_date,
            manual_account_id=manual_account_id,
            plaid_account_id=plaid_account_id,
            recurring_id=recurring_id,
            category_id=category_id,
            is_group=is_group,
            status=status,
            tag_id=tag_id,
            include_pending=include_pending,
            include_custom_metadata=include_custom_metadata,
            limit=limit,
            offset=offset,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetAllTransactions200Response",
            '400': "ErrorResponseObject",
            '401': "ErrorResponseObject",
            '429': "ErrorResponseObject",
            '500': "ErrorResponseObject",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_all_transactions_with_http_info(
        self,
        start_date: Annotated[Optional[date], Field(description="Denotes the beginning of the time period to fetch transactions for. If omitted, the most recent transactions will be returned.  See `limit`. Required if end_date exists. <br>")] = None,
        end_date: Annotated[Optional[date], Field(description="Denotes the end of the time period you'd like to get transactions for. Required if start_date exists. ")] = None,
        manual_account_id: Annotated[Optional[StrictInt], Field(description="Filter transactions to those associated with specified manual account ID or set this to 0 to omit any transactions from manual accounts. Setting both this and `synched_account_id` to 0 will return transactions with no account. These are listed as \"Cash Transactions\" in the Lunch Money GUI.")] = None,
        plaid_account_id: Annotated[Optional[StrictInt], Field(description="Filter transactions to those associated with specified plaid account ID or set this to 0 to omit any transactions from plaid accounts. Setting both this and `manual_account_id` to 0 will return transactions with no account. These are listed as \"Cash Transactions\" in the Lunch Money GUI.")] = None,
        recurring_id: Annotated[Optional[StrictInt], Field(description="Filter transactions to those associated with specified Recurring  Item ID ")] = None,
        category_id: Annotated[Optional[StrictInt], Field(description="Filter transactions to those associated with the specified category ID. Will also match category groups.")] = None,
        is_group: Annotated[Optional[StrictBool], Field(description="Filter by group (returns only grouped transactions if set to true)")] = None,
        status: Annotated[Optional[StrictStr], Field(description="Filter transactions to those with the specified status:<br> - `reviewed`: Only user reviewed transactions or those that were automatically marked as reviewed due to reviewed recurring_item logic<br> - `unreviewed`: Only transactions that need to be reviewed<br> - `delete_pending`: Only transactions that require manual intervention because the plaid account deleted this transaction after it was updated by the user. <br> - `pending`: Only pending transactions from synced accounts.  Must also set `include_pending` to true.")] = None,
        tag_id: Annotated[Optional[StrictInt], Field(description="Filter transactions to those that have a tag with the specified Tag ID")] = None,
        include_pending: Annotated[Optional[StrictBool], Field(description="Pass in true if you’d like to include imported transactions with a pending status.")] = None,
        include_custom_metadata: Annotated[Optional[StrictBool], Field(description="Pass in true if you’d like the returned transactions objects to include any custom  metadata that was previously added via the API.")] = None,
        limit: Annotated[Optional[Annotated[int, Field(le=1000, strict=True, ge=1)]], Field(description="Sets the maximum number of transactions to return. If more match the filter criteria, the response will include a `has_more` attribute set to `true`.  See [pagination](foo)")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="Sets the offset for the records returned. This is typically set automatically in the header.  See [Pagination](/foo)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetAllTransactions200Response]:
        """Get all transactions

        Retrieve a list of all transactions associated with a user's account. <br>If called with no parameters this endpoint will return up to 100 of the most recent transactions.

        :param start_date: Denotes the beginning of the time period to fetch transactions for. If omitted, the most recent transactions will be returned.  See `limit`. Required if end_date exists. <br>
        :type start_date: date
        :param end_date: Denotes the end of the time period you'd like to get transactions for. Required if start_date exists. 
        :type end_date: date
        :param manual_account_id: Filter transactions to those associated with specified manual account ID or set this to 0 to omit any transactions from manual accounts. Setting both this and `synched_account_id` to 0 will return transactions with no account. These are listed as \"Cash Transactions\" in the Lunch Money GUI.
        :type manual_account_id: int
        :param plaid_account_id: Filter transactions to those associated with specified plaid account ID or set this to 0 to omit any transactions from plaid accounts. Setting both this and `manual_account_id` to 0 will return transactions with no account. These are listed as \"Cash Transactions\" in the Lunch Money GUI.
        :type plaid_account_id: int
        :param recurring_id: Filter transactions to those associated with specified Recurring  Item ID 
        :type recurring_id: int
        :param category_id: Filter transactions to those associated with the specified category ID. Will also match category groups.
        :type category_id: int
        :param is_group: Filter by group (returns only grouped transactions if set to true)
        :type is_group: bool
        :param status: Filter transactions to those with the specified status:<br> - `reviewed`: Only user reviewed transactions or those that were automatically marked as reviewed due to reviewed recurring_item logic<br> - `unreviewed`: Only transactions that need to be reviewed<br> - `delete_pending`: Only transactions that require manual intervention because the plaid account deleted this transaction after it was updated by the user. <br> - `pending`: Only pending transactions from synced accounts.  Must also set `include_pending` to true.
        :type status: str
        :param tag_id: Filter transactions to those that have a tag with the specified Tag ID
        :type tag_id: int
        :param include_pending: Pass in true if you’d like to include imported transactions with a pending status.
        :type include_pending: bool
        :param include_custom_metadata: Pass in true if you’d like the returned transactions objects to include any custom  metadata that was previously added via the API.
        :type include_custom_metadata: bool
        :param limit: Sets the maximum number of transactions to return. If more match the filter criteria, the response will include a `has_more` attribute set to `true`.  See [pagination](foo)
        :type limit: int
        :param offset: Sets the offset for the records returned. This is typically set automatically in the header.  See [Pagination](/foo)
        :type offset: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_all_transactions_serialize(
            start_date=start_date,
            end_date=end_date,
            manual_account_id=manual_account_id,
            plaid_account_id=plaid_account_id,
            recurring_id=recurring_id,
            category_id=category_id,
            is_group=is_group,
            status=status,
            tag_id=tag_id,
            include_pending=include_pending,
            include_custom_metadata=include_custom_metadata,
            limit=limit,
            offset=offset,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetAllTransactions200Response",
            '400': "ErrorResponseObject",
            '401': "ErrorResponseObject",
            '429': "ErrorResponseObject",
            '500': "ErrorResponseObject",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_all_transactions_without_preload_content(
        self,
        start_date: Annotated[Optional[date], Field(description="Denotes the beginning of the time period to fetch transactions for. If omitted, the most recent transactions will be returned.  See `limit`. Required if end_date exists. <br>")] = None,
        end_date: Annotated[Optional[date], Field(description="Denotes the end of the time period you'd like to get transactions for. Required if start_date exists. ")] = None,
        manual_account_id: Annotated[Optional[StrictInt], Field(description="Filter transactions to those associated with specified manual account ID or set this to 0 to omit any transactions from manual accounts. Setting both this and `synched_account_id` to 0 will return transactions with no account. These are listed as \"Cash Transactions\" in the Lunch Money GUI.")] = None,
        plaid_account_id: Annotated[Optional[StrictInt], Field(description="Filter transactions to those associated with specified plaid account ID or set this to 0 to omit any transactions from plaid accounts. Setting both this and `manual_account_id` to 0 will return transactions with no account. These are listed as \"Cash Transactions\" in the Lunch Money GUI.")] = None,
        recurring_id: Annotated[Optional[StrictInt], Field(description="Filter transactions to those associated with specified Recurring  Item ID ")] = None,
        category_id: Annotated[Optional[StrictInt], Field(description="Filter transactions to those associated with the specified category ID. Will also match category groups.")] = None,
        is_group: Annotated[Optional[StrictBool], Field(description="Filter by group (returns only grouped transactions if set to true)")] = None,
        status: Annotated[Optional[StrictStr], Field(description="Filter transactions to those with the specified status:<br> - `reviewed`: Only user reviewed transactions or those that were automatically marked as reviewed due to reviewed recurring_item logic<br> - `unreviewed`: Only transactions that need to be reviewed<br> - `delete_pending`: Only transactions that require manual intervention because the plaid account deleted this transaction after it was updated by the user. <br> - `pending`: Only pending transactions from synced accounts.  Must also set `include_pending` to true.")] = None,
        tag_id: Annotated[Optional[StrictInt], Field(description="Filter transactions to those that have a tag with the specified Tag ID")] = None,
        include_pending: Annotated[Optional[StrictBool], Field(description="Pass in true if you’d like to include imported transactions with a pending status.")] = None,
        include_custom_metadata: Annotated[Optional[StrictBool], Field(description="Pass in true if you’d like the returned transactions objects to include any custom  metadata that was previously added via the API.")] = None,
        limit: Annotated[Optional[Annotated[int, Field(le=1000, strict=True, ge=1)]], Field(description="Sets the maximum number of transactions to return. If more match the filter criteria, the response will include a `has_more` attribute set to `true`.  See [pagination](foo)")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="Sets the offset for the records returned. This is typically set automatically in the header.  See [Pagination](/foo)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get all transactions

        Retrieve a list of all transactions associated with a user's account. <br>If called with no parameters this endpoint will return up to 100 of the most recent transactions.

        :param start_date: Denotes the beginning of the time period to fetch transactions for. If omitted, the most recent transactions will be returned.  See `limit`. Required if end_date exists. <br>
        :type start_date: date
        :param end_date: Denotes the end of the time period you'd like to get transactions for. Required if start_date exists. 
        :type end_date: date
        :param manual_account_id: Filter transactions to those associated with specified manual account ID or set this to 0 to omit any transactions from manual accounts. Setting both this and `synched_account_id` to 0 will return transactions with no account. These are listed as \"Cash Transactions\" in the Lunch Money GUI.
        :type manual_account_id: int
        :param plaid_account_id: Filter transactions to those associated with specified plaid account ID or set this to 0 to omit any transactions from plaid accounts. Setting both this and `manual_account_id` to 0 will return transactions with no account. These are listed as \"Cash Transactions\" in the Lunch Money GUI.
        :type plaid_account_id: int
        :param recurring_id: Filter transactions to those associated with specified Recurring  Item ID 
        :type recurring_id: int
        :param category_id: Filter transactions to those associated with the specified category ID. Will also match category groups.
        :type category_id: int
        :param is_group: Filter by group (returns only grouped transactions if set to true)
        :type is_group: bool
        :param status: Filter transactions to those with the specified status:<br> - `reviewed`: Only user reviewed transactions or those that were automatically marked as reviewed due to reviewed recurring_item logic<br> - `unreviewed`: Only transactions that need to be reviewed<br> - `delete_pending`: Only transactions that require manual intervention because the plaid account deleted this transaction after it was updated by the user. <br> - `pending`: Only pending transactions from synced accounts.  Must also set `include_pending` to true.
        :type status: str
        :param tag_id: Filter transactions to those that have a tag with the specified Tag ID
        :type tag_id: int
        :param include_pending: Pass in true if you’d like to include imported transactions with a pending status.
        :type include_pending: bool
        :param include_custom_metadata: Pass in true if you’d like the returned transactions objects to include any custom  metadata that was previously added via the API.
        :type include_custom_metadata: bool
        :param limit: Sets the maximum number of transactions to return. If more match the filter criteria, the response will include a `has_more` attribute set to `true`.  See [pagination](foo)
        :type limit: int
        :param offset: Sets the offset for the records returned. This is typically set automatically in the header.  See [Pagination](/foo)
        :type offset: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_all_transactions_serialize(
            start_date=start_date,
            end_date=end_date,
            manual_account_id=manual_account_id,
            plaid_account_id=plaid_account_id,
            recurring_id=recurring_id,
            category_id=category_id,
            is_group=is_group,
            status=status,
            tag_id=tag_id,
            include_pending=include_pending,
            include_custom_metadata=include_custom_metadata,
            limit=limit,
            offset=offset,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetAllTransactions200Response",
            '400': "ErrorResponseObject",
            '401': "ErrorResponseObject",
            '429': "ErrorResponseObject",
            '500': "ErrorResponseObject",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_all_transactions_serialize(
        self,
        start_date,
        end_date,
        manual_account_id,
        plaid_account_id,
        recurring_id,
        category_id,
        is_group,
        status,
        tag_id,
        include_pending,
        include_custom_metadata,
        limit,
        offset,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if start_date is not None:
            if isinstance(start_date, date):
                _query_params.append(
                    (
                        'start_date',
                        start_date.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('start_date', start_date))
            
        if end_date is not None:
            if isinstance(end_date, date):
                _query_params.append(
                    (
                        'end_date',
                        end_date.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('end_date', end_date))
            
        if manual_account_id is not None:
            
            _query_params.append(('manual_account_id', manual_account_id))
            
        if plaid_account_id is not None:
            
            _query_params.append(('plaid_account_id', plaid_account_id))
            
        if recurring_id is not None:
            
            _query_params.append(('recurring_id', recurring_id))
            
        if category_id is not None:
            
            _query_params.append(('category_id', category_id))
            
        if is_group is not None:
            
            _query_params.append(('is_group', is_group))
            
        if status is not None:
            
            _query_params.append(('status', status))
            
        if tag_id is not None:
            
            _query_params.append(('tag_id', tag_id))
            
        if include_pending is not None:
            
            _query_params.append(('include_pending', include_pending))
            
        if include_custom_metadata is not None:
            
            _query_params.append(('include_custom_metadata', include_custom_metadata))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if offset is not None:
            
            _query_params.append(('offset', offset))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'cookieAuth', 
            'bearerSecurity'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/transactions',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


