# coding: utf-8

"""
Lunch Money API - v2

This is a version of the Lunch Money API described using the the OpenAPI 3.X specification.  The goal of this project is to validate an \"API Design First\" approach for the Lunch Money API, which should allow us to gather developer feedback prior to implementation in order to develop API endpoints more quickly.  This version of the API will differ from the existing v1 beta version. For more information on the changes please see the [v2 API Changelog](https://lm-v2-api-mock-data-f24357049a1b.herokuapp.com/v2/changelog)  Some useful links: - [Current v1 Lunch Money API Documentation](https://lunchmoney.dev) - [v2 API Changelog](https://lm-v2-api-mock-data-f24357049a1b.herokuapp.com/v2/changelog) - [OpenAPI API YAML Specification](https://lm-v2-api-mock-data-f24357049a1b.herokuapp.com/v2/openapi/) - [Awesome Lunch Money Projects](https://lunchmoney.dev/#awesome-projects)

The version of the OpenAPI document: 2.7.4
Contact: devsupport@lunchmoney.app
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import (
    BaseModel,
    ConfigDict,
    Field,
    StrictFloat,
    StrictInt,
    StrictStr,
    field_validator,
)
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from typing import Set
from typing_extensions import Self


class RecurringObjectTransactionCriteria(BaseModel):
    """
    The set of properties used to identify matching transactions.
    """  # noqa: E501

    start_date: Optional[date] = Field(
        default=None,
        description="The beginning of the date range for matching transactions. If null, any transactions before end_date may be considered.",
    )
    end_date: Optional[date] = Field(
        default=None,
        description="The end of the date range for matching transactions. If null, any transactions after start_date may be considered.",
    )
    granularity: Optional[StrictStr] = Field(
        default=None,
        description="The unit of time used to define the cadence of the recurring item.",
    )
    quantity: Optional[StrictInt] = Field(
        default=None,
        description="The number of granularity units between each recurrence.",
    )
    anchor_date: Optional[date] = Field(
        default=None,
        description="The date used in conjunction with the `quantity` and `granularity` properties to calculate expected occurrences of recurring transactions.",
    )
    payee: Optional[StrictStr] = Field(
        default=None,
        description="If any, represents the original transaction payee name that triggered this recurring item's creation.",
    )
    amount: Optional[Annotated[str, Field(strict=True)]] = Field(
        default=None,
        description="The expected amount for a transaction that will match this recurring item.  For recurring items that have a flexible amount this is the average of the specified min and max amounts.",
    )
    currency: Optional[StrictStr] = Field(
        default=None,
        description="Three-letter lowercase currency code of the recurring item.",
    )
    to_base: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, description="The base amount of the recurring item."
    )
    plaid_account_id: Optional[StrictInt] = Field(
        default=None,
        description="The Plaid account ID associated with the recurring item, if any.",
    )
    manual_account_id: Optional[StrictInt] = Field(
        default=None,
        description="The manual account ID associated with the recurring item, if any.",
    )
    __properties: ClassVar[List[str]] = [
        "start_date",
        "end_date",
        "granularity",
        "quantity",
        "anchor_date",
        "payee",
        "amount",
        "currency",
        "to_base",
        "plaid_account_id",
        "manual_account_id",
    ]

    @field_validator("granularity")
    def granularity_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(["day", "week", "month", "year"]):
            raise ValueError(
                "must be one of enum values ('day', 'week', 'month', 'year')"
            )
        return value

    @field_validator("amount")
    def amount_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^-?\d+(\.\d{1,4})?$", value):
            raise ValueError(
                r"must validate the regular expression /^-?\d+(\.\d{1,4})?$/"
            )
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RecurringObjectTransactionCriteria from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if start_date (nullable) is None
        # and model_fields_set contains the field
        if self.start_date is None and "start_date" in self.model_fields_set:
            _dict["start_date"] = None

        # set to None if end_date (nullable) is None
        # and model_fields_set contains the field
        if self.end_date is None and "end_date" in self.model_fields_set:
            _dict["end_date"] = None

        # set to None if payee (nullable) is None
        # and model_fields_set contains the field
        if self.payee is None and "payee" in self.model_fields_set:
            _dict["payee"] = None

        # set to None if plaid_account_id (nullable) is None
        # and model_fields_set contains the field
        if (
            self.plaid_account_id is None
            and "plaid_account_id" in self.model_fields_set
        ):
            _dict["plaid_account_id"] = None

        # set to None if manual_account_id (nullable) is None
        # and model_fields_set contains the field
        if (
            self.manual_account_id is None
            and "manual_account_id" in self.model_fields_set
        ):
            _dict["manual_account_id"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RecurringObjectTransactionCriteria from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "start_date": obj.get("start_date"),
                "end_date": obj.get("end_date"),
                "granularity": obj.get("granularity"),
                "quantity": obj.get("quantity"),
                "anchor_date": obj.get("anchor_date"),
                "payee": obj.get("payee"),
                "amount": obj.get("amount"),
                "currency": obj.get("currency"),
                "to_base": obj.get("to_base"),
                "plaid_account_id": obj.get("plaid_account_id"),
                "manual_account_id": obj.get("manual_account_id"),
            }
        )
        return _obj
