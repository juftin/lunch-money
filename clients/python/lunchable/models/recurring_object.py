# coding: utf-8

"""
    Lunch Money API - v2

    This is a version of the Lunch Money API described using the the OpenAPI 3.X specification.    The goal of this project is to validate an \"API Design First\" approach for the Lunch Money API, which should allow us to gather developer feedback prior to implementation in order to develop API endpoints more quickly.  This version of the API will differ from the existing v1 beta version. For more information on the changes please see the  [v2 API Changelog](https://lm-v2-api-mock-data-f24357049a1b.herokuapp.com/v2/changelog)  Some useful links: - [Current v1 Lunch Money API Documentation](https://lunchmoney.dev) - [v2 API Changelog](https://lm-v2-api-mock-data-f24357049a1b.herokuapp.com/v2/changelog) - [OpenAPI API YAML Specification](https://lm-v2-api-mock-data-f24357049a1b.herokuapp.com/v2/openapi/) - [Awesome Lunch Money Projects](https://lunchmoney.dev/#awesome-projects)

    The version of the OpenAPI document: 2.7.4
    Contact: devsupport@lunchmoney.app
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from lunchable.models.recurring_object_matches import RecurringObjectMatches
from lunchable.models.recurring_object_overrides import RecurringObjectOverrides
from lunchable.models.recurring_object_transaction_criteria import RecurringObjectTransactionCriteria
from typing import Optional, Set
from typing_extensions import Self

class RecurringObject(BaseModel):
    """
    RecurringObject
    """ # noqa: E501
    id: StrictInt = Field(description="The unique identifier of this recurring item")
    description: StrictStr = Field(description="An optional description of this recurring item. This is not written into the transactions.")
    status: StrictStr = Field(description="The status of this recurring item. `suggested` recurring items are generated by Lunch Money, but only `reviewed` recurring items will be applied to matching transactions.")
    transaction_criteria: RecurringObjectTransactionCriteria
    overrides: RecurringObjectOverrides
    matches: Optional[RecurringObjectMatches]
    created_by: StrictInt = Field(description="The ID of the user who created the recurring item.")
    created_at: datetime = Field(description="Date/time the recurring item was created in ISO 8601 extended format.")
    updated_at: datetime = Field(description="Date/time the recurring item was updated in ISO 8601 extended format.")
    source: Optional[StrictStr] = Field(description="This can be one of four values: - `manual`: User created this recurring item manually from the Recurring Items page - `transaction`: User created this by converting a transaction from the Transactions page - `system`: Recurring item was created by the system on transaction import - `null`: Some older recurring items may not have a source. ")
    __properties: ClassVar[List[str]] = ["id", "description", "status", "transaction_criteria", "overrides", "matches", "created_by", "created_at", "updated_at", "source"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['suggested', 'reviewed']):
            raise ValueError("must be one of enum values ('suggested', 'reviewed')")
        return value

    @field_validator('source')
    def source_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['manual', 'transaction', 'system']):
            raise ValueError("must be one of enum values ('manual', 'transaction', 'system')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RecurringObject from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of transaction_criteria
        if self.transaction_criteria:
            _dict['transaction_criteria'] = self.transaction_criteria.to_dict()
        # override the default output from pydantic by calling `to_dict()` of overrides
        if self.overrides:
            _dict['overrides'] = self.overrides.to_dict()
        # override the default output from pydantic by calling `to_dict()` of matches
        if self.matches:
            _dict['matches'] = self.matches.to_dict()
        # set to None if matches (nullable) is None
        # and model_fields_set contains the field
        if self.matches is None and "matches" in self.model_fields_set:
            _dict['matches'] = None

        # set to None if source (nullable) is None
        # and model_fields_set contains the field
        if self.source is None and "source" in self.model_fields_set:
            _dict['source'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RecurringObject from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "description": obj.get("description"),
            "status": obj.get("status"),
            "transaction_criteria": RecurringObjectTransactionCriteria.from_dict(obj["transaction_criteria"]) if obj.get("transaction_criteria") is not None else None,
            "overrides": RecurringObjectOverrides.from_dict(obj["overrides"]) if obj.get("overrides") is not None else None,
            "matches": RecurringObjectMatches.from_dict(obj["matches"]) if obj.get("matches") is not None else None,
            "created_by": obj.get("created_by"),
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at"),
            "source": obj.get("source")
        })
        return _obj


