# coding: utf-8

"""
Lunch Money API - v2

This is a version of the Lunch Money API described using the the OpenAPI 3.X specification.  The goal of this project is to validate an \"API Design First\" approach for the Lunch Money API, which should allow us to gather developer feedback prior to implementation in order to develop API endpoints more quickly.  This version of the API will differ from the existing v1 beta version. For more information on the changes please see the [v2 API Changelog](https://lm-v2-api-mock-data-f24357049a1b.herokuapp.com/v2/changelog)  Some useful links: - [Current v1 Lunch Money API Documentation](https://lunchmoney.dev) - [v2 API Changelog](https://lm-v2-api-mock-data-f24357049a1b.herokuapp.com/v2/changelog) - [OpenAPI API YAML Specification](https://lm-v2-api-mock-data-f24357049a1b.herokuapp.com/v2/openapi/) - [Awesome Lunch Money Projects](https://lunchmoney.dev/#awesome-projects)

The version of the OpenAPI document: 2.7.4
Contact: devsupport@lunchmoney.app
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from lunchable.models.recurring_object_matches_found_transactions_inner import (
    RecurringObjectMatchesFoundTransactionsInner,
)
from typing import Set
from typing_extensions import Self


class RecurringObjectMatches(BaseModel):
    """
    Details on expected, found and missing transactions for the specified range. This will be `null` for recurring items with a `status` of `suggested`.
    """  # noqa: E501

    request_start_date: Optional[date] = Field(
        default=None,
        description="The beginning of the date range that this request used to find matching transactions.",
    )
    request_end_date: Optional[date] = Field(
        default=None,
        description="The beginning of the date range that this request used to find matching transactions.",
    )
    expected_occurrence_dates: Optional[List[date]] = Field(
        default=None,
        description="A list of dates within the specified range where a recurring transactions is expected.",
    )
    found_transactions: Optional[List[RecurringObjectMatchesFoundTransactionsInner]] = (
        Field(
            default=None,
            description="A list with the dates and IDs of matching transactions.",
        )
    )
    missing_transaction_dates: Optional[List[date]] = Field(
        default=None,
        description="A list of dates within the range of where a recurring transaction was expected but none was found.",
    )
    __properties: ClassVar[List[str]] = [
        "request_start_date",
        "request_end_date",
        "expected_occurrence_dates",
        "found_transactions",
        "missing_transaction_dates",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RecurringObjectMatches from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in found_transactions (list)
        _items = []
        if self.found_transactions:
            for _item_found_transactions in self.found_transactions:
                if _item_found_transactions:
                    _items.append(_item_found_transactions.to_dict())
            _dict["found_transactions"] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RecurringObjectMatches from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "request_start_date": obj.get("request_start_date"),
                "request_end_date": obj.get("request_end_date"),
                "expected_occurrence_dates": obj.get("expected_occurrence_dates"),
                "found_transactions": [
                    RecurringObjectMatchesFoundTransactionsInner.from_dict(_item)
                    for _item in obj["found_transactions"]
                ]
                if obj.get("found_transactions") is not None
                else None,
                "missing_transaction_dates": obj.get("missing_transaction_dates"),
            }
        )
        return _obj
