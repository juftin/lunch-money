# coding: utf-8

"""
Lunch Money API - v2

This is a version of the Lunch Money API described using the the OpenAPI 3.X specification.  The goal of this project is to validate an \"API Design First\" approach for the Lunch Money API, which should allow us to gather developer feedback prior to implementation in order to develop API endpoints more quickly.  This version of the API will differ from the existing v1 beta version. For more information on the changes please see the [v2 API Changelog](https://lm-v2-api-mock-data-f24357049a1b.herokuapp.com/v2/changelog)  Some useful links: - [Current v1 Lunch Money API Documentation](https://lunchmoney.dev) - [v2 API Changelog](https://lm-v2-api-mock-data-f24357049a1b.herokuapp.com/v2/changelog) - [OpenAPI API YAML Specification](https://lm-v2-api-mock-data-f24357049a1b.herokuapp.com/v2/openapi/) - [Awesome Lunch Money Projects](https://lunchmoney.dev/#awesome-projects)

The version of the OpenAPI document: 2.7.4
Contact: devsupport@lunchmoney.app
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from typing import Set
from typing_extensions import Self


class CategoryObject(BaseModel):
    """
    CategoryObject
    """  # noqa: E501

    id: StrictInt = Field(
        description="A system defined unique identifier for the category."
    )
    name: Annotated[str, Field(min_length=1, strict=True, max_length=100)] = Field(
        description="The name of the category."
    )
    description: Optional[Annotated[str, Field(strict=True, max_length=200)]] = Field(
        description="The description of the category or `null` if not set."
    )
    is_income: StrictBool = Field(
        description="If true, the transactions in this category will be treated as income."
    )
    exclude_from_budget: StrictBool = Field(
        description="If true, the transactions in this category will be excluded from the budget."
    )
    exclude_from_totals: StrictBool = Field(
        description="If true, the transactions in this category will be excluded from totals."
    )
    updated_at: datetime = Field(
        description="The date and time of when the category was last updated (in the ISO 8601 extended format)."
    )
    created_at: datetime = Field(
        description="The date and time of when the category was created (in the ISO 8601 extended format)."
    )
    group_id: Optional[StrictInt] = Field(
        description="The ID of the category group this category belongs to or `null` if the category doesn't belong to a group, or is itself a category group."
    )
    is_group: StrictBool = Field(
        description="If true, the category is a group that can be a parent to other categories."
    )
    children: Optional[List[ChildCategoryObject]] = Field(
        default=None,
        description="For category groups, this will populate with details about the categories that belong to this group.  The objects in this array are similar to Category Objects but do not include the `is_income`, `exclude_from_budget`, and `exclude_from_totals` properties as these are inherited from the Category Group.  In addition the `is_group` property will always be `false``, and there will be no `children` attribute.",
    )
    archived: StrictBool = Field(
        description="If true, the category is archived and not displayed in relevant areas of the Lunch Money app."
    )
    archived_at: Optional[datetime] = Field(
        description="The date and time of when the category was last archived (in the ISO 8601 extended format)."
    )
    order: Optional[Union[StrictFloat, StrictInt]] = Field(
        description="An index specifying the position in which the category is displayed on the categories page in the Lunch Money GUI. For categories within a category group the order index is relative to the other categories within the group.<br> This value for this property will be `null` for categories created via the API until they are modified on the Categories page in the Lunch Money GUI."
    )
    __properties: ClassVar[List[str]] = [
        "id",
        "name",
        "description",
        "is_income",
        "exclude_from_budget",
        "exclude_from_totals",
        "updated_at",
        "created_at",
        "group_id",
        "is_group",
        "children",
        "archived",
        "archived_at",
        "order",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CategoryObject from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in children (list)
        _items = []
        if self.children:
            for _item_children in self.children:
                if _item_children:
                    _items.append(_item_children.to_dict())
            _dict["children"] = _items
        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict["description"] = None

        # set to None if group_id (nullable) is None
        # and model_fields_set contains the field
        if self.group_id is None and "group_id" in self.model_fields_set:
            _dict["group_id"] = None

        # set to None if archived_at (nullable) is None
        # and model_fields_set contains the field
        if self.archived_at is None and "archived_at" in self.model_fields_set:
            _dict["archived_at"] = None

        # set to None if order (nullable) is None
        # and model_fields_set contains the field
        if self.order is None and "order" in self.model_fields_set:
            _dict["order"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CategoryObject from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "id": obj.get("id"),
                "name": obj.get("name"),
                "description": obj.get("description"),
                "is_income": obj.get("is_income"),
                "exclude_from_budget": obj.get("exclude_from_budget"),
                "exclude_from_totals": obj.get("exclude_from_totals"),
                "updated_at": obj.get("updated_at"),
                "created_at": obj.get("created_at"),
                "group_id": obj.get("group_id"),
                "is_group": obj.get("is_group"),
                "children": [
                    ChildCategoryObject.from_dict(_item) for _item in obj["children"]
                ]
                if obj.get("children") is not None
                else None,
                "archived": obj.get("archived"),
                "archived_at": obj.get("archived_at"),
                "order": obj.get("order"),
            }
        )
        return _obj
