# coding: utf-8

"""
Lunch Money API - v2

This is a version of the Lunch Money API described using the the OpenAPI 3.X specification.  The goal of this project is to validate an \"API Design First\" approach for the Lunch Money API, which should allow us to gather developer feedback prior to implementation in order to develop API endpoints more quickly.  This version of the API will differ from the existing v1 beta version. For more information on the changes please see the [v2 API Changelog](https://lm-v2-api-mock-data-f24357049a1b.herokuapp.com/v2/changelog)  Some useful links: - [Current v1 Lunch Money API Documentation](https://lunchmoney.dev) - [v2 API Changelog](https://lm-v2-api-mock-data-f24357049a1b.herokuapp.com/v2/changelog) - [OpenAPI API YAML Specification](https://lm-v2-api-mock-data-f24357049a1b.herokuapp.com/v2/openapi/) - [Awesome Lunch Money Projects](https://lunchmoney.dev/#awesome-projects)

The version of the OpenAPI document: 2.7.4
Contact: devsupport@lunchmoney.app
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Set
from typing_extensions import Self


class GroupTransactionsRequest(BaseModel):
    """
    GroupTransactionsRequest
    """  # noqa: E501

    ids: List[StrictInt] = Field(
        description="List of existing transaction IDs to group. Split and recurring transactions may not be grouped. Transactions that are already grouped must be ungrouped before being regrouped."
    )
    var_date: date = Field(
        description="Date for the new grouped transaction in ISO 8601 format.",
        alias="date",
    )
    payee: Annotated[str, Field(min_length=0, strict=True, max_length=140)] = Field(
        description="The payee for the new grouped transaction. "
    )
    category_id: Optional[StrictInt] = Field(
        default=None,
        description="The ID of an existing category to assign to the grouped transaction. If not set and all the grouped transactions have the same category, the grouped transaction will inherit the category, otherwise the new transaction will have no category.",
    )
    notes: Optional[
        Annotated[str, Field(min_length=0, strict=True, max_length=350)]
    ] = Field(default=None, description="Notes for the grouped transaction. ")
    status: Optional[StrictStr] = Field(
        default=None,
        description="If set must be either `reviewed` or `unreviewed`.  If not set, defaults to `reviewed`.",
    )
    tag_ids: Optional[List[StrictInt]] = Field(
        default=None,
        description="A list of IDs for the tags associated with the grouped transaction.  Each ID must match an existing tag associated with the user's account. If not set, no tags will be associated with the created transaction.",
    )
    __properties: ClassVar[List[str]] = [
        "ids",
        "date",
        "payee",
        "category_id",
        "notes",
        "status",
        "tag_ids",
    ]

    @field_validator("status")
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(["reviewed", "unreviewed"]):
            raise ValueError("must be one of enum values ('reviewed', 'unreviewed')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GroupTransactionsRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if category_id (nullable) is None
        # and model_fields_set contains the field
        if self.category_id is None and "category_id" in self.model_fields_set:
            _dict["category_id"] = None

        # set to None if notes (nullable) is None
        # and model_fields_set contains the field
        if self.notes is None and "notes" in self.model_fields_set:
            _dict["notes"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GroupTransactionsRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "ids": obj.get("ids"),
                "date": obj.get("date"),
                "payee": obj.get("payee"),
                "category_id": obj.get("category_id"),
                "notes": obj.get("notes"),
                "status": obj.get("status"),
                "tag_ids": obj.get("tag_ids"),
            }
        )
        return _obj
