# coding: utf-8

"""
Lunch Money API - v2

This is a version of the Lunch Money API described using the the OpenAPI 3.X specification.    The goal of this project is to validate an \"API Design First\" approach for the Lunch Money API, which should allow us to gather developer feedback prior to implementation in order to develop API endpoints more quickly.  This version of the API will differ from the existing v1 beta version. For more information on the changes please see the  [v2 API Changelog](https://lm-v2-api-mock-data-f24357049a1b.herokuapp.com/v2/changelog)  Some useful links: - [Current v1 Lunch Money API Documentation](https://lunchmoney.dev) - [v2 API Changelog](https://lm-v2-api-mock-data-f24357049a1b.herokuapp.com/v2/changelog) - [OpenAPI API YAML Specification](https://lm-v2-api-mock-data-f24357049a1b.herokuapp.com/v2/openapi/) - [Awesome Lunch Money Projects](https://lunchmoney.dev/#awesome-projects)

The version of the OpenAPI document: 2.7.4
Contact: devsupport@lunchmoney.app
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date, datetime
from pydantic import (
    BaseModel,
    ConfigDict,
    Field,
    StrictBool,
    StrictFloat,
    StrictInt,
    StrictStr,
    field_validator,
)
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from typing import Set
from typing_extensions import Self


class PlaidAccountObject(BaseModel):
    """
    An object containing information about an account synced via Plaid
    """  # noqa: E501

    id: StrictInt = Field(description="The unique identifier of this account")
    date_linked: date = Field(
        description="Date account was first linked in ISO 8601 format"
    )
    name: StrictStr = Field(
        description="Name of the account. This field is set by Plaid and cannot be altered."
    )
    display_name: Optional[StrictStr] = Field(
        description="Optional display name for the account set by the user. If not set it will return a concatenated string of institution and account name."
    )
    type: StrictStr = Field(
        description="Primary type of the account, for example credit, depository, etc. This field is set by Plaid and cannot be altered."
    )
    subtype: StrictStr = Field(
        description="Optional account subtype. This field is set by Plaid and cannot be altered."
    )
    mask: StrictStr = Field(
        description="Mask (last 3 to 4 digits of account) of account. This field is set by Plaid and cannot be altered."
    )
    institution_name: StrictStr = Field(
        description="Name of institution holding the account. This field is set by Plaid and cannot be altered."
    )
    status: StrictStr = Field(
        description="Denotes the current status of the account within Lunch Money. Must be one of<br> - `active`: Account is active and in good state<br> - `inactive`: Account marked inactive from user. No transactions fetched or balance update for this account.<br> - `relink`: Account needs to be relinked with Plaid.<br> - `syncing`: Account is awaiting first import of transactions. <br> - `not found`: Account cannot be found with Plaid<br> - `not supported`: Account is not supported with Plaid<br> - `error`: Account is in error with Plaid.<br>"
    )
    allow_transaction_modifications: StrictBool = Field(
        description='Is false if the "Allow Modification To Transactions" property for this account has been toggled off.  Otherwise it is set to true.'
    )
    limit: Optional[Union[StrictFloat, StrictInt]] = Field(
        description="Optional credit limit of the account. This field is set by Plaid and cannot be altered"
    )
    balance: StrictStr = Field(
        description="Current balance of the account in numeric format to 4 decimal places. This field is set by Plaid and cannot be altered."
    )
    currency: Annotated[str, Field(min_length=3, strict=True, max_length=3)] = Field(
        description="Three-letter lowercase currency code of the account balance"
    )
    balance_last_update: datetime = Field(
        description="Date balance was last updated in ISO 8601 extended format. This field is set by Plaid and cannot be altered."
    )
    import_start_date: Optional[date] = Field(
        description="Date of earliest date allowed for importing transactions. Transactions earlier than this date are not imported."
    )
    last_import: Optional[datetime] = Field(
        description="Timestamp in ISO 8601 extended format of the last time Lunch Money imported new data from Plaid for this account."
    )
    last_fetch: Optional[datetime] = Field(
        description="Timestamp in ISO 8601 extended format of the last successful request from Lunch Money for updated data or timestamps from Plaid in ISO 8601 extended format (not necessarily date of last successful import)"
    )
    plaid_last_successful_update: datetime = Field(
        description="Timestamp in ISO 8601 extended format of the last time Plaid successfully connected with institution for new transaction updates, regardless of whether any new data was available in the update."
    )
    __properties: ClassVar[List[str]] = [
        "id",
        "date_linked",
        "name",
        "display_name",
        "type",
        "subtype",
        "mask",
        "institution_name",
        "status",
        "allow_transaction_modifications",
        "limit",
        "balance",
        "currency",
        "balance_last_update",
        "import_start_date",
        "last_import",
        "last_fetch",
        "plaid_last_successful_update",
    ]

    @field_validator("status")
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(
            [
                "active",
                "inactive",
                "relink",
                "syncing",
                "not found",
                "not supported",
                "error",
            ]
        ):
            raise ValueError(
                "must be one of enum values ('active', 'inactive', 'relink', 'syncing', 'not found', 'not supported', 'error')"
            )
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PlaidAccountObject from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if display_name (nullable) is None
        # and model_fields_set contains the field
        if self.display_name is None and "display_name" in self.model_fields_set:
            _dict["display_name"] = None

        # set to None if limit (nullable) is None
        # and model_fields_set contains the field
        if self.limit is None and "limit" in self.model_fields_set:
            _dict["limit"] = None

        # set to None if import_start_date (nullable) is None
        # and model_fields_set contains the field
        if (
            self.import_start_date is None
            and "import_start_date" in self.model_fields_set
        ):
            _dict["import_start_date"] = None

        # set to None if last_import (nullable) is None
        # and model_fields_set contains the field
        if self.last_import is None and "last_import" in self.model_fields_set:
            _dict["last_import"] = None

        # set to None if last_fetch (nullable) is None
        # and model_fields_set contains the field
        if self.last_fetch is None and "last_fetch" in self.model_fields_set:
            _dict["last_fetch"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PlaidAccountObject from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "id": obj.get("id"),
                "date_linked": obj.get("date_linked"),
                "name": obj.get("name"),
                "display_name": obj.get("display_name"),
                "type": obj.get("type"),
                "subtype": obj.get("subtype"),
                "mask": obj.get("mask"),
                "institution_name": obj.get("institution_name"),
                "status": obj.get("status"),
                "allow_transaction_modifications": obj.get(
                    "allow_transaction_modifications"
                ),
                "limit": obj.get("limit"),
                "balance": obj.get("balance"),
                "currency": obj.get("currency"),
                "balance_last_update": obj.get("balance_last_update"),
                "import_start_date": obj.get("import_start_date"),
                "last_import": obj.get("last_import"),
                "last_fetch": obj.get("last_fetch"),
                "plaid_last_successful_update": obj.get("plaid_last_successful_update"),
            }
        )
        return _obj
