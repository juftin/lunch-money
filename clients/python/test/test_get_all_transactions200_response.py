# coding: utf-8

"""
    Lunch Money API - v2

    This is a version of the Lunch Money API described using the the OpenAPI 3.X specification.    The goal of this project is to validate an \"API Design First\" approach for the Lunch Money API, which should allow us to gather developer feedback prior to implementation in order to develop API endpoints more quickly.  This version of the API will differ from the existing v1 beta version. For more information on the changes please see the  [v2 API Changelog](https://lm-v2-api-mock-data-f24357049a1b.herokuapp.com/v2/changelog)  Some useful links: - [Current v1 Lunch Money API Documentation](https://lunchmoney.dev) - [v2 API Changelog](https://lm-v2-api-mock-data-f24357049a1b.herokuapp.com/v2/changelog) - [OpenAPI API YAML Specification](https://lm-v2-api-mock-data-f24357049a1b.herokuapp.com/v2/openapi/) - [Awesome Lunch Money Projects](https://lunchmoney.dev/#awesome-projects)

    The version of the OpenAPI document: 2.7.4
    Contact: devsupport@lunchmoney.app
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from lunchable.models.get_all_transactions200_response import GetAllTransactions200Response

class TestGetAllTransactions200Response(unittest.TestCase):
    """GetAllTransactions200Response unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GetAllTransactions200Response:
        """Test GetAllTransactions200Response
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GetAllTransactions200Response`
        """
        model = GetAllTransactions200Response()
        if include_optional:
            return GetAllTransactions200Response(
                transactions = [
                    lunchable.models.transaction_object.transactionObject(
                        id = 56, 
                        date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                        amount = '', 
                        currency = null, 
                        to_base = 1.337, 
                        recurring_id = 56, 
                        overrides = lunchable.models.transaction_overrides_object.transactionOverridesObject(
                            original_payee = '', 
                            original_category_id = 56, 
                            original_notes = '', ), 
                        payee = '', 
                        category_id = 56, 
                        notes = '', 
                        status = 'reviewed', 
                        is_pending = True, 
                        created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        is_parent = True, 
                        children = [
                            ''
                            ], 
                        parent_id = [
                            1.337
                            ], 
                        is_group = True, 
                        group_id = 56, 
                        manual_account_id = 56, 
                        plaid_account_id = 56, 
                        tag_ids = [
                            56
                            ], 
                        source = 'api', 
                        external_id = '', 
                        plaid_metadata = lunchable.models.plaid_metadata.plaid_metadata(), 
                        custom_metadata = lunchable.models.custom_metadata.custom_metadata(), )
                    ],
                has_more = True,
                error = ''
            )
        else:
            return GetAllTransactions200Response(
                transactions = [
                    lunchable.models.transaction_object.transactionObject(
                        id = 56, 
                        date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                        amount = '', 
                        currency = null, 
                        to_base = 1.337, 
                        recurring_id = 56, 
                        overrides = lunchable.models.transaction_overrides_object.transactionOverridesObject(
                            original_payee = '', 
                            original_category_id = 56, 
                            original_notes = '', ), 
                        payee = '', 
                        category_id = 56, 
                        notes = '', 
                        status = 'reviewed', 
                        is_pending = True, 
                        created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        is_parent = True, 
                        children = [
                            ''
                            ], 
                        parent_id = [
                            1.337
                            ], 
                        is_group = True, 
                        group_id = 56, 
                        manual_account_id = 56, 
                        plaid_account_id = 56, 
                        tag_ids = [
                            56
                            ], 
                        source = 'api', 
                        external_id = '', 
                        plaid_metadata = lunchable.models.plaid_metadata.plaid_metadata(), 
                        custom_metadata = lunchable.models.custom_metadata.custom_metadata(), )
                    ],
                has_more = True,
        )
        """

    def testGetAllTransactions200Response(self):
        """Test GetAllTransactions200Response"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
